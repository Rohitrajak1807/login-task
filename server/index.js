const PORT = 8000
const ROUNDS_OF_SALT = 15
// generated by me banging my head on keyboard, dont ever do this in production
const SECRET = `cr3n03 g~4yt4ty^34teg/l.'[o[gsl'rh}krd46s+$4e&{g6ebw.gsf%p@geh,4ggsehso w[tw3!t0]e4y*+*g(e$h4rt6n^4f14ft+4`
const express = require('express')
const bodyParser = require('body-parser')
const mongoose = require('mongoose')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const cors = require('cors')
const User = require('./models/User')
const app = express()

mongoose.connect('mongodb://localhost/users', {
  useNewUrlParser: true,
  useCreateIndex: true,
  useUnifiedTopology: true,
  useFindAndModify: true
}).then(() => console.log('Done'))
app.use(bodyParser.json())
app.use(cors())

app.route('/login').post(async function (req, res) {
  console.log(res.body)
  const {id: email, password: plainTextPassword} = req.body
  try {
    const user = await User.findOne({
      email: email
    }).lean()
    if (!user || !bcrypt.compare(plainTextPassword, user.password)) {
      return res.status(400).send({
        error: {
          code: 400,
          message: 'Invalid Email or Password'
        }
      })
    }
    console.log(plainTextPassword)
    console.log(user)
    const token = jwt.sign({
      id: user._id,
      email: user.email
    }, SECRET)
    return res.status(200).json({
      user: {
        email: user.email
      },
      auth: {
        token: token
      }
    })
  } catch (e) {
    console.log(e)
  }
  res.send('ok')
})

app.route('/signup').post(async function (req, res) {
  const {id: email, password: plainTextPassword} = req.body
  const password = await bcrypt.hash(plainTextPassword, ROUNDS_OF_SALT)
  try {
    const response = await User.create({
      email,
      password
    })
    console.log(response)
    return res.json({
      token: 'svs'
    })
  } catch (e) {
    if (e.code === 11000) {
      return res.status(409).send({
        error: {
          message: 'Duplicate Email',
          code: 409
        }
      })
    }
  }
})

app.listen(PORT, () => console.log(`server started on ${PORT}`))
